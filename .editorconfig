root = true

[*]
charset = utf-8
indent_size = 4
indent_style = space
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true

[*.{csproj,json,md,nuspec,yml}]
indent_size = 2

[*.{sln,xml}]
indent_style = tab

[*.cs]
max_line_length = 120

### .NET style rules

[*.cs]
# this. preferences
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Modifier preferences
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:suggestion
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent
dotnet_style_readonly_field = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion

# Null-checking preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

### C# style rules

[*.cs]
# var preferences
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none
csharp_style_expression_bodied_lambdas = true:none
csharp_style_expression_bodied_local_functions = false:none

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion

# Expression-level preferences
csharp_style_inlined_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:none
csharp_style_deconstructed_variable_declaration = true:none
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Code block preferences
csharp_prefer_braces = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion

# Modifier preferences
csharp_prefer_static_local_function = true:suggestion

### .NET formatting rules

# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Namespace preferences
dotnet_style_namespace_match_folder = true

### C# formatting rules

[*.cs]
# Newline preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

# using directive preferences
csharp_using_directive_placement = outside_namespace

# Namespace preferences
csharp_style_namespace_declarations = file_scoped

### Naming rules

# Style definitions
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.interface_style.required_prefix = I
dotnet_naming_style.interface_style.capitalization = pascal_case
dotnet_naming_style.type_parameter_style.required_prefix = T
dotnet_naming_style.type_parameter_style.capitalization = pascal_case
dotnet_naming_style.private_field_style.required_prefix = _
dotnet_naming_style.private_field_style.capitalization = camel_case

# PascalCase (classes)
dotnet_naming_rule.classes_should_be_pascal_case.symbols = classes
dotnet_naming_rule.classes_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.classes_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.classes.applicable_kinds = class, struct

# PascalCase (structs)
dotnet_naming_rule.structs_should_be_pascal_case.symbols = structs
dotnet_naming_rule.structs_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.structs_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.structs.applicable_kinds = struct

# PascalCase prefixed by I (interface)
dotnet_naming_rule.interfaces_should_be_pascal_case_prefixed_by_i.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_pascal_case_prefixed_by_i.severity = suggestion
dotnet_naming_rule.interfaces_should_be_pascal_case_prefixed_by_i.style = interface_style
dotnet_naming_symbols.interfaces.applicable_kinds = interface

# PascalCase (constant fields)
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.required_modifiers = const

# _camelCase (private fields)
dotnet_naming_rule.private_fields_should_be_camel_case.symbols = private_fields
dotnet_naming_rule.private_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.private_fields_should_be_camel_case.style = private_field_style
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

# PascalCase (static readonly fields)
dotnet_naming_rule.private_static_readonly_fields_should_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.private_static_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.private_static_readonly_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly

# PascalCase (non-private fields)
dotnet_naming_rule.non_private_fields_should_be_pascal_case.symbols = non_private_fields
dotnet_naming_rule.non_private_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.non_private_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_fields.applicable_accessibilities = internal, protected, public

# PascalCase (properties)
dotnet_naming_rule.properties_should_be_pascal_case.symbols = properties
dotnet_naming_rule.properties_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.properties_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.properties.applicable_kinds = property

# PascalCase (methods)
dotnet_naming_rule.methods_should_be_pascal_case.symbols = methods
dotnet_naming_rule.methods_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.methods_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.methods.applicable_kinds = method

# PascalCase (local methods)
dotnet_naming_rule.local_methods_should_be_pascal_case.symbols = local_methods
dotnet_naming_rule.local_methods_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_methods_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.local_methods.applicable_kinds = local_function

# PascalCase (delegates)
dotnet_naming_rule.delegates_should_be_pascal_case.symbols = delegates
dotnet_naming_rule.delegates_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.delegates_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.delegates.applicable_kinds = delegate

# PascalCase prefixed by On (events)
dotnet_naming_rule.events_should_be_pascal_case_prefixed_by_on.symbols = events
dotnet_naming_rule.events_should_be_pascal_case_prefixed_by_on.severity = suggestion
dotnet_naming_rule.events_should_be_pascal_case_prefixed_by_on.style = pascal_case_style
dotnet_naming_symbols.events.applicable_kinds = event

# camelCase (parameters)
dotnet_naming_rule.parameters_should_be_camel_case.symbols = parameters
dotnet_naming_rule.parameters_should_be_camel_case.severity = suggestion
dotnet_naming_rule.parameters_should_be_camel_case.style = camel_case_style
dotnet_naming_symbols.parameters.applicable_kinds = parameter

# PascalCase prefixed by T (type parameters)
dotnet_naming_rule.type_parameters_should_be_pascal_case_prefixed_by_t.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_pascal_case_prefixed_by_t.severity = suggestion
dotnet_naming_rule.type_parameters_should_be_pascal_case_prefixed_by_t.style = type_parameter_style
dotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter

# camelCase (locals)
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style
dotnet_naming_symbols.locals.applicable_kinds = local
